{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory300050"
		},
		"BlobTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1132318c-9d17-4a0c-8c01-1d86fc6451ca/resourceGroups/res_grp_sav/providers/Microsoft.Storage/storageAccounts/slsyndatalake"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03_dataflow_json_arrays')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CusomerArraysJsonSet",
								"type": "DatasetReference"
							},
							"name": "CustomerArraysJsonStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "synapse_customer",
								"type": "DatasetReference"
							},
							"name": "CustomerCoursesSink"
						}
					],
					"transformations": [
						{
							"name": "flattenCustomerCourseArrays"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> CustomerArraysJsonStream",
						"CustomerArraysJsonStream foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          Mobile = details.mobile,",
						"          City = details.city",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCustomerCourseArrays",
						"flattenCustomerCourseArrays sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Registered,",
						"          Courses,",
						"          Mobile,",
						"          City",
						"     )) ~> CustomerCoursesSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-dataflow_webLogs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datalake_logfile_delimited",
								"type": "DatasetReference"
							},
							"name": "datalakelogfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sunapseanalweblogsset",
								"type": "DatasetReference"
							},
							"name": "SynapseWebLogsSink"
						}
					],
					"transformations": [
						{
							"name": "renamecolumn"
						},
						{
							"name": "SplitLogDatantoArray"
						},
						{
							"name": "MapColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {2024-11-18 00:48:55 10.0.0.4 GET / - 80 - 31.10.136.174 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML} as string,",
						"          {+like+Gecko)+Chrome/130.0.0.0+Safari/537.36+Edg/130.0.0.0 - 200 0 0 319} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 4) ~> datalakelogfile",
						"datalakelogfile select(mapColumn(",
						"          logdata = {2024-11-18 00:48:55 10.0.0.4 GET / - 80 - 31.10.136.174 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renamecolumn",
						"renamecolumn derive(logdata = split(logdata, \" \")) ~> SplitLogDatantoArray",
						"SplitLogDatantoArray derive(LogDate = logdata[1],",
						"          IPAddress = logdata[9],",
						"          RequestMethod = logdata[4],",
						"          RequestResource = logdata[5]) ~> MapColumns",
						"MapColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LogDate as date,",
						"          IpAddress as string,",
						"          RequestMethod as string,",
						"          RequestResource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LogDate,",
						"          IpAddress = IPAddress,",
						"          RequestMethod,",
						"          RequestResource",
						"     )) ~> SynapseWebLogsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05_dataflow_RXtarctResourvcGroup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datalake_logActivity_csv_set",
								"type": "DatasetReference"
							},
							"name": "ActivityLogCsvStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "synapse_AactivityLogSplitPerRG_set",
								"type": "DatasetReference"
							},
							"name": "SplitPerGresourceGroupToSnapseSink"
						}
					],
					"transformations": [
						{
							"name": "SplitPerResourceGroup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ActivityLogCsvStream",
						"ActivityLogCsvStream split(Resourcegroup == 'app-grp',",
						"     disjoint: false) ~> SplitPerResourceGroup@(appgrpstream, otehrsstream)",
						"SplitPerResourceGroup@appgrpstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> SplitPerGresourceGroupToSnapseSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dtflow_sql_synapse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "salesorderheaderstream"
						},
						{
							"dataset": {
								"referenceName": "salesOrderDetailDSet",
								"type": "DatasetReference"
							},
							"name": "salesorderdetailstream"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlCustomerTable",
								"type": "DatasetReference"
							},
							"name": "customerstream"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "ProductStream"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlProductCategory",
								"type": "DatasetReference"
							},
							"name": "productCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable4",
								"type": "DatasetReference"
							},
							"name": "MaxCustomerSKStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable3",
								"type": "DatasetReference"
							},
							"name": "destinationsynapsefactsales"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable4",
								"type": "DatasetReference"
							},
							"name": "destinationDimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DestinationDimProdctSet",
								"type": "DatasetReference"
							},
							"name": "distinationDimProduct"
						},
						{
							"name": "CacheSinkCustomerSK"
						}
					],
					"transformations": [
						{
							"name": "joinheaderdetail"
						},
						{
							"name": "selectcolumns"
						},
						{
							"name": "selectCustomerColumns"
						},
						{
							"name": "joinProductProdCategory"
						},
						{
							"name": "selectProductProdCategoryColumns"
						},
						{
							"name": "filterColorNotNull"
						},
						{
							"name": "derivedColumnTotalDue"
						},
						{
							"name": "surrogateProductSK"
						},
						{
							"name": "surrogateCustomerSK"
						},
						{
							"name": "derivedSurrogateCustomerSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> salesorderheaderstream",
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> salesorderdetailstream",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from salesLT.Customer where CustomerId <20000',",
						"     format: 'query') ~> customerstream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productCategoryStream",
						"source(output(",
						"          MaxCusomerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(CustomerSK) as \\'MaxCusomerSK\\' from dbo.dimCustomer ',",
						"     format: 'query',",
						"     staged: true) ~> MaxCustomerSKStream",
						"salesorderheaderstream, salesorderdetailstream join(salesorderheaderstream@SalesOrderID == salesorderdetailstream@SalesOrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinheaderdetail",
						"joinheaderdetail select(mapColumn(",
						"          SalesOrderID = salesorderheaderstream@SalesOrderID,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          LineTotal",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumns",
						"customerstream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomerColumns",
						"ProductStream, productCategoryStream join(ProductStream@ProductCategoryID == productCategoryStream@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductProdCategory",
						"joinProductProdCategory select(mapColumn(",
						"          ProductID = ProductStream@ProductID,",
						"          ProductNumber = ProductStream@ProductNumber,",
						"          Color = ProductStream@Color,",
						"          ProductCategoryID = ProductStream@ProductCategoryID,",
						"          ProductCategoryName = productCategoryStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductProdCategoryColumns",
						"selectProductProdCategoryColumns filter(!(isNull(Color))) ~> filterColorNotNull",
						"selectcolumns derive(TotalDue = add(Freight, add(SubTotal, TaxAmt))) ~> derivedColumnTotalDue",
						"filterColorNotNull keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateProductSK",
						"selectCustomerColumns keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateCustomerSK",
						"surrogateCustomerSK derive(CustomerSK = CustomerSK + CacheSinkCustomerSK#outputs()[1].MaxCusomerSK) ~> derivedSurrogateCustomerSK",
						"derivedColumnTotalDue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          CustomerID as integer,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(18,0)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          LineTotal",
						"     )) ~> destinationsynapsefactsales",
						"derivedSurrogateCustomerSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerId as integer,",
						"          CompanyName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerId = CustomerID,",
						"          CompanyName,",
						"          CustomerSK",
						"     )) ~> destinationDimCustomer",
						"surrogateProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          ProductCategoryId as integer,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductNumber,",
						"          Color,",
						"          ProductCategoryId = ProductCategoryID,",
						"          ProductCategoryName,",
						"          ProductSK",
						"     )) ~> distinationDimProduct",
						"MaxCustomerSKStream sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> CacheSinkCustomerSK"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_pipelinefactsales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowsajesheaderdetail",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "sprocClearDestinationTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dtflow_sql_synapse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"salesorderheaderstream": {},
									"salesorderdetailstream": {},
									"customerstream": {},
									"ProductStream": {},
									"productCategoryStream": {},
									"MaxCustomerSKStream": {},
									"destinationsynapsefactsales": {},
									"destinationDimCustomer": {},
									"distinationDimProduct": {},
									"CacheSinkCustomerSK": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "slsyndatalake_linked",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sprocClearDestinationTables",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[cleanTables]"
						},
						"linkedServiceName": {
							"referenceName": "datapool_linked",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-17T10:20:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dtflow_sql_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03_pipeline_csv_to_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Json",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_DataFlow_CSV",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvDtlake": {},
									"LogActivityJsonSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "02-CopyData-JSON-DWH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow Json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": null,
									"modifiedDatetimeEnd": null,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "slsyndatalake_linked",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Correlationid']"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Operationname']"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventcategory']"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcetype']"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcegroup']"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_logActivity_json_set",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SynapseActivityLogSink_set",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "03-DeleteJson",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "02-CopyData-JSON-DWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataLake_logActivity_json_set",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-17T15:57:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/05-pipeline-Jsonarray-Pool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dflow_CustArraysJson",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "03_dataflow_json_arrays",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerArraysJsonStream": {},
									"CustomerCoursesSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "slsyndatalake_linked",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-17T18:21:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/03_dataflow_json_arrays')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/06-Pipeline-ProcessLogData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "01-Activity-CopyLogData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "appvm_logfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datalake_logfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LogDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "01-Activity-CopyLogData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "05-dataflow_webLogs",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"datalakelogfile": {},
									"SynapseWebLogsSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "slsyndatalake_linked",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-19T00:02:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/05-dataflow_webLogs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/07-Pipeline_ProcessSplitResGroup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActiviyLoop_SplitRpws",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "05_dataflow_RXtarctResourvcGroup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ActivityLogCsvStream": {},
									"SplitPerGresourceGroupToSnapseSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "slsyndatalake_linked",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-19T01:04:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/05_dataflow_RXtarctResourvcGroup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "01-Pipeline-CSV-To-Paquet",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/data/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('BlobTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}